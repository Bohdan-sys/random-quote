{"version":3,"sources":["QuoteTemplate.js","App.js","reportWebVitals.js","index.js"],"names":["QuoteTemplate","useState","quote","setQuote","error","setError","isLoaded","setIsLoaded","citate","setCitate","Math","floor","random","color","setColor","useEffect","fetch","then","res","json","data","length","className","style","backgroundColor","transition","icon","author","href","target","rel","onClick","library","add","fas","fab","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAiEeA,EA9DO,WAAO,IAAD,EACEC,mBAAS,IADX,mBACjBC,EADiB,KACVC,EADU,OAEEF,mBAAS,MAFX,mBAEjBG,EAFiB,KAEVC,EAFU,OAGQJ,oBAAS,GAHjB,mBAGjBK,EAHiB,KAGPC,EAHO,OAIIN,qBAJJ,mBAIjBO,EAJiB,KAITC,EAJS,OAKER,mBAAS,OAASS,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAAMF,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAAMF,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,KALtI,mBAKjBC,EALiB,KAKVC,EALU,KA4BxB,OAhBAC,qBAAU,WACNC,MAAM,kEACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACGb,GAAY,GACZJ,EAASiB,GACTX,EAAUW,EAAKV,KAAKC,MAAMD,KAAKE,SAAWQ,EAAKC,OAAS,QAE5D,SAACjB,GACGG,GAAY,GACZF,EAASD,QAGtB,IAGC,qBAAKkB,UAAU,MAAMC,MAAO,CAAEC,gBAAiBX,EAAOY,WAAY,OAAlE,SACI,sBAAKH,UAAU,iBAAf,UACI,qBAAKA,UAAU,cAAf,SACI,qBAAIA,UAAU,8DAA8DC,MAAO,CAAEV,MAAOA,GAA5F,UACI,cAAC,IAAD,CAAiBa,KAAM,CAAC,MAAO,cAAeJ,UAAU,kBAAkBC,MAAO,CAAEV,MAAOA,KACzFT,EAAQ,QACFE,EACGE,EAASA,EAAON,MAAQ,QADhB,iBAI1B,qBAAKoB,UAAU,gBAAf,SACI,qBAAIA,UAAU,6CAA6CC,MAAO,CAAEV,MAAOA,GAA3E,eAAuFL,EAASA,EAAOmB,OAAS,YAEpH,sBAAKL,UAAU,iBAAf,UACI,sBAAKA,UAAU,QAAf,UACI,mBAAGM,KAAK,mCAAmCC,OAAO,SAASC,IAAI,aAA/D,SACI,cAAC,IAAD,CAAiBJ,KAAM,CAAC,MAAO,kBAAmBJ,UAAU,oBAAoBC,MAAO,CAAEV,MAAOA,OAEpG,mBAAGe,KAAK,0BAA0BC,OAAO,SAASC,IAAI,aAAtD,SACI,cAAC,IAAD,CAAiBJ,KAAM,CAAC,MAAO,iBAAkBJ,UAAU,mBAAmBC,MAAO,CAAEV,MAAOA,UAGtG,wBAAQS,UAAU,SACdS,QAAS,WA5CzBtB,EAAUP,EAAMQ,KAAKC,MAAMD,KAAKE,SAAWV,EAAMmB,OAAS,KAC1DP,EAAS,OAASJ,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAAMF,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,IAAMF,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,MA4CpHW,MAAO,CAAEC,gBAAiBX,EAAOY,WAAY,OAFjD,SAGI,sBAAMH,UAAU,+CAAhB,kC,sBClDxBU,IAAQC,IAAIC,IAAKC,KAWFC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCDSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.43e94e19.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst QuoteTemplate = () => {\r\n    const [quote, setQuote] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [citate, setCitate] = useState();\r\n    const [color, setColor] = useState(\"rgb(\" + Math.floor(Math.random() * 200) + \",\" + Math.floor(Math.random() * 200) + \",\" + Math.floor(Math.random() * 200) + \")\");\r\n\r\n    const random = () => {\r\n        setCitate(quote[Math.floor(Math.random() * quote.length - 1)]);\r\n        setColor(\"rgb(\" + Math.floor(Math.random() * 200) + \",\" + Math.floor(Math.random() * 200) + \",\" + Math.floor(Math.random() * 200) + \")\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://my-json-server.typicode.com/Bohdan-sys/Data-test/posts\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (data) => {\r\n                    setIsLoaded(true);\r\n                    setQuote(data)\r\n                    setCitate(data[Math.floor(Math.random() * data.length - 1)])\r\n                },\r\n                (error) => {\r\n                    setIsLoaded(true);\r\n                    setError(error);\r\n                }\r\n            )\r\n    }, [])\r\n\r\n    return (\r\n        <div className='App' style={{ backgroundColor: color, transition: '.5s' }}>\r\n            <div className='quote quote-sm'>\r\n                <div className='quote__text'>\r\n                    <h1 className='caption caption--size_3 caption--bold caption--align_center' style={{ color: color }}>\r\n                        <FontAwesomeIcon icon={['fas', 'quote-left']} className=\"icon icon-quote\" style={{ color: color }} />\r\n                        {error ? 'Error'\r\n                            : !isLoaded ? 'Loaded...'\r\n                                : citate ? citate.quote : 'Error'}\r\n                    </h1>\r\n                </div>\r\n                <div className='quote__author'>\r\n                    <h1 className='caption caption--size_5 caption--align_end' style={{ color: color }}> -{citate ? citate.author : '----'}</h1>\r\n                </div>\r\n                <div className='quote__buttons'>\r\n                    <div className='links'>\r\n                        <a href='https://twitter.com/intent/tweet' target='_blank' rel=\"noreferrer\">\r\n                            <FontAwesomeIcon icon={['fab', 'twitter-square']} className=\"icon icon-twitter\" style={{ color: color }} />\r\n                        </a>\r\n                        <a href='https://www.tumblr.com/' target='_blank' rel=\"noreferrer\">\r\n                            <FontAwesomeIcon icon={['fab', 'tumblr-square']} className=\"icon icon-tumblr\" style={{ color: color }} />\r\n                        </a>\r\n                    </div>\r\n                    <button className='button'\r\n                        onClick={() => { random() }}\r\n                        style={{ backgroundColor: color, transition: '.5s' }}>\r\n                        <span className='caption caption--color_white caption--size_6'>New quote</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuoteTemplate\r\n\r\n","\nimport './sass/App.sass';\nimport QuoteTemplate from './QuoteTemplate';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(fas, fab);\n\n\nfunction App() {\n  return (\n    <div>\n      <QuoteTemplate />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}